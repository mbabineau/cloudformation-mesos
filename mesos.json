{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches a Mesos cluster",

  "Parameters" : {

    "ClusterId" : {
      "Description" : "Mesos cluster ID",
      "Type" : "String",
      "Default" : "mesos"
    },
    "KeyName" : {
      "Description" : "Existing EC2 KeyPair to be associated with all cluster instances for SSH access. For default AMIs, log in as the 'ubuntu' user.",
      "Type" : "String"
    },
    "Subnets" : {
      "Description" : "List of VPC subnet IDs in which to launch the cluster. Must match the passed AvailabilityZones.",
      "Type" : "String"
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "String"
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Must match the passed Subnets.",
      "Type" : "String",
      "Default" : ""
    },

    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access to Mesos (e.g., 'sg-123456')",
      "Type": "String"
    },
    "ZkClientSecurityGroup" : {
      "Description" : "Existing security group that should be used by ZooKeeper clients to access ZooKeeper",
      "Type" : "String"
    },
    "ExhibitorDiscoveryUrl" : {
      "Description" : "Exhibitor URL that returns active ZooKeeper nodes ('getCluster') (e.g., http://<exhibitor_node>/exhibitor/v1/cluster/list)",
      "Type" : "String"
    },

    "MasterInstanceAmi" : {
      "Description" : "(optional) AMI to use for Mesos Masters",
      "Type" : "String",
      "Default" : ""
    },
    "MasterInstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "MasterInstanceCount" : {
      "Description" : "Number of master nodes to launch",
      "Type" : "Number",
      "Default" : "1"
    },
    "MasterQuorumCount" : {
      "Description" : "Number of masters needed for Mesos replicated log registry quorum (should be ceiling(<MasterInstanceCount>/2))",
      "Type" : "Number",
      "Default" : "1"
    },
    "MasterLogstashConfig" : {
      "Description" : "(optional) Config string for Logstash on the Mesos Masters",
      "Type" : "String",
      "Default" : ""
    },
    "MasterConfigScriptS3Bucket" : {
      "Description" : "(optional) S3 bucket of an executable to download and run after other boot-time provisioning (e.g., \"my-bucket\").",
      "Type" : "String",
      "Default" : ""
    },
    "MasterConfigScriptS3Path" : {
      "Description" : "(optional) Path within ConfigScriptS3Bucket of an executable to download and run after other boot-time provisioning (e.g., \"/path/to/script\").",
      "Type" : "String",
      "Default" : ""
    },    
    "MasterRootVolumeSize": {
      "Description" : "(optional) Set the size (in GB) of the master root EBS volume.",
      "Type" : "Number",
      "Default" : "8"
    },

    "SlaveInstanceAmi" : {
      "Description" : "(optional) AMI to use for Mesos Slaves",
      "Type" : "String",
      "Default" : ""
    },
    "SlaveInstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "SlaveInstanceCount" : {
      "Description" : "Number of slave nodes to launch",
      "Type" : "Number",
      "Default" : "1"
    },
    "SlaveLogstashConfig" : {
      "Description" : "(optional) Config string for Logstash on the Mesos Slaves (to read task logs, you can use 'input { file { path => \"/tmp/mesos/slaves/*/frameworks/*/executors/*/runs/latest/stdout\" }')",
      "Type" : "String",
      "Default" : ""
    },
    "SlaveConfigScriptS3Bucket" : {
      "Description" : "(optional) S3 bucket of an executable to download and run after other boot-time provisioning (e.g., \"my-bucket\").",
      "Type" : "String",
      "Default" : ""
    },
    "SlaveConfigScriptS3Path" : {
      "Description" : "(optional) Path within ConfigScriptS3Bucket of an executable to download and run after other boot-time provisioning (e.g., \"/path/to/script\").",
      "Type" : "String",
      "Default" : ""
    },
    "SlaveResources" : {
      "Description" : "(optional) Resources to allocate to Mesos (as passed to --resources). To expose ports 8000-9000, for instance, you can use 'ports(*):[8000-9000, 31000-32000]'",
      "Type" : "String",
      "Default" : ""
    },
    "SlaveRootVolumeSize": {
      "Description" : "(optional) Set the size (in GB) of the slave root EBS volume. Default is 8.",
      "Type" : "Number",
      "Default" : "8"
    },

    "DockerCredentials" : {
      "Description" : "JSON string to be saved as .dockercfg",
      "Type" : "String",
      "Default" : "{}"
    },
    "MarathonDockerImage" : {
      "Description" : "The Marathon Docker image (format: 'registry:port/repository:version')",
      "Type" : "String",
      "Default" : "mesosphere/marathon:v0.8.2-RC3"
    },
    "MarathonLoggerDockerImage" : {
      "Description" : "The marathon-logger Docker image (format: 'registry:port/repository:version')",
      "Type" : "String",
      "Default" : "thefactory/marathon-logger:latest"
    },
    "MarathonLoggerEventStore" : {
      "Description" : "The marathon-logger event store connection string",
      "Type" : "String",
      "Default" : "in-memory://localhost/?max_length=100"
    },

    "MesosMasterTemplateUrl" : {
      "Description" : "URL of the Mesos Master CloudFormation template on S3 (must be \"https://s3.amazonaws.com/<bucket>/<key>\")",
      "Type" : "String"
    },
    "MesosSlaveTemplateUrl" : {
      "Description" : "URL of the Mesos Slave CloudFormation template on S3 (must be \"https://s3.amazonaws.com/<bucket>/<key>\")",
      "Type" : "String"
    }
  },

  "Conditions" : {
    "UseCustomMasterAmi" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "MasterInstanceAmi" }, ""] }] },
    "UseCustomSlaveAmi" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "SlaveInstanceAmi" }, ""] }] }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-0a878262"
      },
      "us-west-1" : {
        "AMI" : "ami-494eac0d"
      },
      "us-west-2" : {
        "AMI" : "ami-734a7f43"
      },
      "eu-west-1" : {
        "AMI" : "ami-99fc9cee"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-50467b02"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-79542943"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-f26ca9f2"
      },
      "sa-east-1" : {
        "AMI" : "ami-3944c124"
      }
    }
  },

  "Resources" : {

    "MesosMasterStack" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Ref" : "MesosMasterTemplateUrl" },
        "TimeoutInMinutes" : "15",
        "Parameters" : {
          "InstanceAmi" : { "Fn::If" : [
            "UseCustomMasterAmi",
            { "Ref" : "MasterInstanceAmi" },
            { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] }
          ]},
          "InstanceType" : { "Ref" : "MasterInstanceType" },
          "KeyName" : { "Ref" : "KeyName" },
          "ClusterId" : { "Ref" : "ClusterId" },
          "ClusterSize" : { "Ref" : "MasterInstanceCount" },
          "QuorumSize" : { "Ref" : "MasterQuorumCount" },
          "DockerCredentials" : { "Ref" : "DockerCredentials" },
          "LogstashConfig" : { "Ref" : "MasterLogstashConfig" },
          "ConfigScriptS3Bucket" : { "Ref" : "MasterConfigScriptS3Bucket" },
          "ConfigScriptS3Path" : { "Ref" : "MasterConfigScriptS3Path" },
          "MarathonDockerImage" : { "Ref" : "MarathonDockerImage" },
          "MarathonLoggerDockerImage" : { "Ref" : "MarathonLoggerDockerImage" },
          "MarathonLoggerEventStore" : { "Ref" : "MarathonLoggerEventStore" },
          "ExhibitorDiscoveryUrl" : { "Ref" : "ExhibitorDiscoveryUrl" },
          "ZkClientSecurityGroup" : { "Ref" : "ZkClientSecurityGroup" },
          "AdminSecurityGroup" : { "Ref" : "AdminSecurityGroup" },
          "Subnets" : { "Ref" : "Subnets" },
          "VpcId" : { "Ref" : "VpcId" },
          "AvailabilityZones" : { "Ref" : "AvailabilityZones" },
          "MasterRootVolumeSize" : { "Ref" : "MasterRootVolumeSize" }
        }
      }
    },

    "MesosSlaveStack" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : "MesosMasterStack",
      "Properties" : {
        "TemplateURL" : { "Ref" : "MesosSlaveTemplateUrl" },
        "TimeoutInMinutes" : "15",
        "Parameters" : {
          "InstanceAmi" : { "Fn::If" : [
            "UseCustomSlaveAmi",
            { "Ref" : "SlaveInstanceAmi" },
            { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] }
          ]},
          "InstanceType" : { "Ref" : "SlaveInstanceType" },
          "KeyName" : { "Ref" : "KeyName" },
          "ClusterId" : { "Ref" : "ClusterId" },
          "ClusterSize" : { "Ref" : "SlaveInstanceCount" },
          "DockerCredentials" : { "Ref" : "DockerCredentials" },
          "LogstashConfig" : { "Ref" : "SlaveLogstashConfig" },
          "ConfigScriptS3Bucket" : { "Ref" : "SlaveConfigScriptS3Bucket" },
          "ConfigScriptS3Path" : { "Ref" : "SlaveConfigScriptS3Path" },
          "MesosResources" : { "Ref" : "SlaveResources" },
          "ExhibitorDiscoveryUrl" : { "Ref" : "ExhibitorDiscoveryUrl" },
          "ZkClientSecurityGroup" : { "Ref" : "ZkClientSecurityGroup" },
          "MesosMasterSecurityGroup" : { "Fn::GetAtt" : [ "MesosMasterStack", "Outputs.MesosMasterSecurityGroup" ] },
          "AdminSecurityGroup" : { "Ref" : "AdminSecurityGroup" },
          "Subnets" : { "Ref" : "Subnets" },
          "VpcId" : { "Ref" : "VpcId" },
          "AvailabilityZones" : { "Ref" : "AvailabilityZones" },
          "SlaveRootVolumeSize" : { "Ref" : "SlaveRootVolumeSize" }
        }
      }
    }

  }
}
